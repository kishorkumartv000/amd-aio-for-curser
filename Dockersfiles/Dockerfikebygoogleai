# syntax=docker/dockerfile:1.4

# -----------------------------------------------------------
# Stage 1: Build Environment - installs all dependencies and compiles tools
# -----------------------------------------------------------
FROM python:3.12-slim AS builder

# Set environment variables for non-interactive commands
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Kolkata \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/usr/local/go/bin:$PATH" \
    PATH_BINARY_FFMPEG="/usr/bin/ffmpeg"

WORKDIR /app

# Install system dependencies
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
    ffmpeg \
    gcc \
    libffi-dev \
    fuse3 \
    build-essential \
    zlib1g-dev \
    wget \
    cmake \
    pkg-config \
    libssl-dev \
    unzip \
    libxml2 \
    libxslt1.1 \
    curl \
    git \
    make \
    automake \
    autoconf \
    libtool \
    pkg-config && \
    rm -rf /var/lib/apt/lists/*

# Install rclone
RUN ARCH=$(uname -m); \
    if [ "$ARCH" = "x86_64" ]; then ARCH="amd64"; \
    elif [ "$ARCH" = "aarch64" ]; then ARCH="arm64"; fi; \
    curl -sO "https://downloads.rclone.org/v1.68.2/rclone-v1.68.2-linux-${ARCH}.zip" && \
    unzip -q "rclone-v1.68.2-linux-${ARCH}.zip" && \
    install -m 755 "rclone-v1.68.2-linux-${ARCH}/rclone" /usr/bin/rclone && \
    rm -rf "rclone-v1.68.2-linux-${ARCH}*"

# Install N_m3u8DL-RE
RUN mkdir -p /tmp/N_m3u8DL-RE && \
    cd /tmp/N_m3u8DL-RE && \
    wget -q "https://github.com/nilaoda/N_m3u8DL-RE/releases/download/v0.3.0-beta/N_m3u8DL-RE_v0.3.0-beta_linux-x64_20241203.tar.gz" && \
    tar -xzf N_m3u8DL-RE_v0.3.0-beta_linux-x64_20241203.tar.gz && \
    cp N_m3u8DL-RE /usr/bin/ && \
    chmod +x /usr/bin/N_m3u8DL-RE && \
    rm -rf /tmp/N_m3u8DL-RE

# Build GPAC (MP4Box) from source
RUN git clone https://github.com/gpac/gpac.git /tmp/gpac && \
    cd /tmp/gpac && \
    ./configure --static-bin && \
    make -j"$(nproc)" && \
    make install && \
    chmod +x /usr/local/bin/MP4Box && \
    rm -rf /tmp/gpac && \
    MP4Box -version

# Install Bento4 (FIXED URL and version)
# Check https://www.bento4.com/downloads/ for the latest version.
ARG BENTO4_VERSION="1-6-0-647"
ARG BENTO4_SDK_NAME="Bento4-SDK-${BENTO4_VERSION}.x86_64-unknown-linux"
ARG BENTO4_URL="https://www.bento4.com/downloads/${BENTO4_SDK_NAME}.zip"
RUN mkdir -p /tmp/Bento4 && \
    cd /tmp/Bento4 && \
    wget -q "${BENTO4_URL}" && \
    unzip -o -q "${BENTO4_SDK_NAME}.zip" && \
    cd "${BENTO4_SDK_NAME}" && \
    find bin/ -maxdepth 1 -type f -executable -exec cp {} /usr/local/bin \; && \
    cp -r include /usr/local/include/Bento4 && \
    cp -r lib /usr/local/lib/Bento4 && \
    rm -rf /tmp/Bento4

# Install Go 1.25.0
RUN ARCH=$(uname -m); \
    case $ARCH in \
        x86_64) GO_ARCH="amd64" ;; \
        aarch64) GO_ARCH="arm64" ;; \
        armv7l) GO_ARCH="armv6l" ;; \
        i686) GO_ARCH="386" ;; \
        *) echo "Unsupported architecture: $ARCH"; exit 1 ;; \
    esac; \
    wget -q "https://go.dev/dl/go1.25.0.linux-${GO_ARCH}.tar.gz" -O /tmp/go.tar.gz && \
    tar -C /usr/local -xzf /tmp/go.tar.gz && \
    rm /tmp/go.tar.gz

# Pre-clone amalac repo and build Go project
RUN git clone https://github.com/zhaarey/apple-music-alac-atmos-downloader.git /root/amalac && \
    cd /root/amalac && \
    /usr/local/go/bin/go clean -modcache && \
    /usr/local/go/bin/go get -u ./... && \
    /usr/local/go/bin/go mod tidy

# Install Tidal-dl-ng + python-ffmpeg
RUN pip install --no-cache-dir --upgrade tidal-dl-ng python-ffmpeg

# Clone tidal-dl-ng repo for poetry installation
RUN git clone https://github.com/exislow/tidal-dl-ng.git /app/tidal-dl-ng

# Install poetry and dependencies
RUN pip install --no-cache-dir --upgrade poetry && \
    cd /app/tidal-dl-ng && \
    poetry install --all-extras --with dev,docs && \
    cd /app

# Clone wrapper and build
RUN ARCH=$(uname -m); \
    if [ "$ARCH" = "x86_64" ]; then \
        WRAPPER_URL="https://github.com/zhaarey/wrapper/releases/download/linux.V2/wrapper.x86_64.tar.gz"; \
    elif [ "$ARCH" = "aarch64" ]; then \
        WRAPPER_URL="https://github.com/zhaarey/wrapper/releases/download/arm64/wrapper.arm64.tar.gz"; \
    else \
        echo "Unsupported architecture: $ARCH" && exit 1; \
    fi; \
    mkdir -p /app/wrapper && \
    cd /app/wrapper && \
    wget -q "$WRAPPER_URL" -O wrapper.tar.gz && \
    tar -xzf wrapper.tar.gz && \
    rm wrapper.tar.gz && \
    chmod +x wrapper

# -----------------------------------------------------------
# Stage 2: Final Image - a minimal runtime environment
# -----------------------------------------------------------
FROM python:3.12-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Asia/Kolkata \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH_BINARY_FFMPEG="/usr/bin/ffmpeg"

WORKDIR /usr/src/app

# Create output directories
RUN mkdir -p /root/Music/Apple\ Music/alac \
             /root/Music/Apple\ Music/atmos \
             /root/Music/Apple\ Music/aac && \
    mkdir -p /root/.config/rclone && \
    touch /root/.config/rclone/rclone.conf

# Copy compiled binaries and other necessary files from the builder stage
COPY --from=builder /usr/bin/ffmpeg /usr/bin/ffmpeg
COPY --from=builder /usr/bin/rclone /usr/bin/rclone
COPY --from=builder /usr/bin/N_m3u8DL-RE /usr/bin/N_m3u8DL-RE
COPY --from=builder /usr/local/bin/MP4Box /usr/local/bin/MP4Box
COPY --from=builder /usr/local/bin/mp4decrypt /usr/local/bin/mp4decrypt
COPY --from=builder /usr/local/bin/mp4dump /usr/local/bin/mp4dump
COPY --from=builder /root/amalac /root/amalac
COPY --from=builder /app/tidal-dl-ng /usr/src/app/tidal-dl-ng
COPY --from=builder /app/wrapper /app/wrapper

# Install Go, Bento4 and tidal-dl-ng runtime dependencies (if any)
# This is a placeholder for any necessary pip installs
# using requirements.txt from the application.
RUN pip install --no-cache-dir --upgrade tidal-dl-ng python-ffmpeg poetry

# Copy entrypoint script and set permissions
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh && \
    chmod 777 /usr/src/app

# Use custom entrypoint
ENTRYPOINT ["/entrypoint.sh"]
